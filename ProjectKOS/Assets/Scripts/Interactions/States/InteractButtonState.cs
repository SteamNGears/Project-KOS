//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using UnityEngine.UI;
namespace AssemblyCSharp
{
	public class InteractButtonState:InteractionState
	{

		private GameObject cvsQuestion;	/**The canvas containing the "interact" button"*/
		Button btnInteract;				/**The interact button itself(gotten from the canvas)*/
		private bool buttonClicked;		/**Whether or not the interact button has been clicked*/


		/**
		 * Sets default values and calls base constructor
		 * */
		public InteractButtonState (GameObject _actee, GameObject _actor = null):base(_actee, _actor)
		{
			this.actee.GetComponent<Interaction> ().ExitSignal += this.Suspend;
			buttonClicked = false;
		}

		/**
		 * Displays a GUI with an interact button, 
		 * if the button is clicked, then the state is transitioned to an Opening State(See OpeningState.cs)
		 * 
		 * */
		public override InteractionState Behave ()
		{
			//if the gui doesn't exist, create it
			if (cvsQuestion == null && this.actor != null) 
			{

				if(this.actor.tag == "Player")
				{
					cvsQuestion = GameObject.Instantiate(Resources.Load("InteractionCanvas/InteractCanvas") as GameObject);//get the canvas
					btnInteract = cvsQuestion.GetComponentInChildren<Button> ();//get the button
					btnInteract.onClick.AddListener ( this.onButtonClick ); //add a listener for the click event
			
				}
			}

			//if the button has been clicked,
			if (this.buttonClicked) {
				GameObject.Destroy(this.cvsQuestion);	//clean up the question 
				return new OpeningState (this.actee, this.actor);	//open the door
			}
			else
				return this;//continue incurrent state

		}

		/**
		 * 
		 * */
		public override void Suspend(Collider c)
		{
			//remove event listener
			this.actee.GetComponent<Interaction> ().ExitSignal -= this.Suspend;
			this.actor = null;
			this.btnInteract.onClick.RemoveListener (this.onButtonClick);//clean up listener
			GameObject.Destroy (this.cvsQuestion);
		}

		void onButtonClick()
		{
			this.buttonClicked = true;	//set button clicked to true
			this.btnInteract.onClick.RemoveListener (this.onButtonClick);//clean up listener
		}

		
	}
}

